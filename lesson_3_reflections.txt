When would you want to use a remote repository rather than keeping all your work local?

I would want to do this if I was collaborating with another person or a group of people.
Also, if I needed to access my work from multiple computers.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

When collaborating with others, they might be making changes that affect what I am working on.  
If my inputs keep changing, it would be very hard to debug my own code.  
If I can manually pull their changes, I can be sure that my own code is working first.


Describe the differences between forks, clones, and branches.  When would you use one instead of another?

Forks are copies of repositories on GitHub.  Like a clone, but on the hub.  I would use this to copy someone else's repository if I wanted to make changes for my own purposes.  I would do this if I want to share my versions with others or collaborate with others on it.
Clone is a copy of repository that I keep on my local computer.  I can make changes here, but I my changes are not visible on GitHub.
Branch is done within a local repository.  It is not its own repository.


What is the benefit of having a copy of the last known state of the remote stored locally?

I can use git diff to identify any differences between the branch I have been working on and the last known state of the remote.
When I merge, I can resolve conflicts locally before pushing to GitHub or other collaborative space.
I can do these things offline, resolve conflicts more quickly, and avoid impacting others in the collaborative space.


How could you collaborate using Git or GitHub?  What would be easier, and what would be harder?

You could have multple copies of directories for people to work in, and then attempt to manually merge code.
This would be time consuming and error prone.
A local system using checkout and checkin could work, but that might only allow 1 person at a time to change any file.
This could avoid conflicts, but does not allow for concurrent engineering.


